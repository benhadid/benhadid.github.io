---
type: lab
date: 2019-09-19T4:00:00+4:30
title: 'Traveaux Pratiques #2 - Stockage et accès aux données en mémoire'
#attachment: /static_files/labs/lab.zip
#solutions: /static_files/labs/lab_solutions.pdf
due_event: 
    type: due
    date: 2019-09-26T23:59:00+3:30
    description: 'Traveaux Pratiques #2 - à remettre'
---

# Objectifs

- Rappel sur les structures en langage C
- Comprendre comment les structures de données sont stockées et représentées en mémoire

# Introduction

  Dans le langage C, une variable de type `char` correspond à un **octet signé**. Donc, pour stocker une variable de type `char` un octet sera alloué en mémoire. Pour une variable de type `int`, nous aurons besoin de *quatre* octets pour stocker la valeur correspondante en mémoire. En général, pour connaître combien d'octets sont nécessaire pour représenter un type de donnée spécifique en langage C, nous pouvons utiliser la fonction `sizeof(_type_)` où *_type_* peut être `char`, `unsigned char`, `short`, `int` ...   

  Dans les exercices suivants, nous allons voir comment les structures de données en langage C sont représentées en mémoire. Une structure, définie avec le mot clé *struct* en langage C, est un groupement de plusieurs objets qui peuvent être de types différents. Exemple :

  ```c
     struct temps {
       unsigned char heures;
       unsigned char minutes;
       float secondes;
     };
  ```

  Ainsi, une structure possède un *nom* appelé aussi *étiquette* (ici temps) et une suite de déclarations qui constituent *les champs* ou *les membres* de la structure (ici heures, minutes et secondes). Une fois la structure décrite, il est possible de créer un/des objet(s) de ce type en utilisant la syntaxe suivante :

  ```c
     struct etiquette id_objet;  
  ```

  La méthode est donc la même que pour définir les variables en langage C si ce n’est que, pour une structure, le type de l'objet est précisé à l’aide du mot-clé `struct` et du nom de la structure.

## Initialisation

  Comme pour les variables classiques, il est possible d’initialiser un objet structure dès sa définition. Cependant, l’initialisation s’effectue à l’aide d’une liste de valeurs pour plusieurs membres de la structure et peut être effectuée de deux manières : *Initialisation séquentielle* ou *initialisation sélective*.

### Initialisation séquentielle

  L’initialisation séquentielle permet de spécifier une valeur pour un ou plusieurs membres de la structure en suivant l’ordre de la définition. Ainsi, pour la structure temps définie plus haut, l’exemple ci-dessous initialise les membres *heures* à 2, *minutes* à 17 et *secondes* à 45.37.

  ```c  
     struct temps t = { 2, 17, 45.37 };
  ```

### Initialisation sélective

  Il est aussi possible de recourir à une initialisation sélective en spécifiant explicitement le ou les champs à initialiser. Cela permet d'initialiser une partie seulement de la structure, si besoin. D'autre part, cette méthode permet une meilleure lisibilité du code. Dans l'exemple ci-dessous l’initialisation sélective de l'objet `t` produit le même résultat que dans l'exemple précédent :

  ```c
     struct temps t = { .secondes = 45.37, .minutes =  17, .heures = 2 };
  ```

  *Note* : Vous remarquerez que, dans ce cas, il n'est plus nécessaire de suivre l’ordre dont lequel les éléments de la structure sont définis.

# Enoncé

  L'exemple ci-dessous présente une implémentation d'une structure de données en langage C. Après déclaration de notre structure de donnée `struct data`, un objet `client` est ensuite déclaré et initialisé avec la méthode sélective vue plus haut. Plus tard dans le code, une boucle `for` est utilisée pour parcourir et afficher à l'aide de la fonction <a href="/assets/docs/printf.3.html">`printf(3)`</a> tous les octets alloués en mémoire lors de la déclaration de notre objet `client`.

```c
#include <stdio.h>

struct _data {
    char gender;
    int id;
    char age;
    short poste;
    double taille;
    float poid;
    char name[10];
} data;

int main(int argc, char** argv)
{
    // déclaration et initialisation de l'objet 'client' de type 'struct data'
    struct data client = {.age = 27,
                   .id = 170347,
                   .gender ='M',
                   .poste = 4567,
                   .name = "Jon Doe",
                   .taille = 1.81,
                   .poid = 80.
                 };

    // on utilise un pointeur de type (unsigned) char pour
    // parcourir notre structure octet par octet
    unsigned char* ptr = (unsigned char *) &client;

    printf("Adresse mémoire | Valeur\n----------------|-------\n");

    int size = sizeof(data);   // size: taille de la tructure data
    int i;                     // i: indice de notre boucle for
    for(i=0; i<size; ++i)
    {
        // dans le printf(...) en dessous
        //   %p  permet d'afficher l'adresse associée au pointeur ptr
        //   %#x permet d'afficher les nombres en hexadécimal.

        printf(" %p : 0x%02x\n", ptr, *ptr);

        // incrémenter 'ptr' pour passer au prochain octet
        ++ptr;
    }

    return 0;
}
```
<br>
Le résultat après exécution du code en dessus ressemble à ceci :

```bash
Adresse mémoire | Valeur
----------------|-------
0x7ffe8bc5cb20 : 0x4d
0x7ffe8bc5cb21 : 0x00
0x7ffe8bc5cb22 : 0x00
0x7ffe8bc5cb23 : 0x00
0x7ffe8bc5cb24 : 0x6b
0x7ffe8bc5cb25 : 0x99
0x7ffe8bc5cb26 : 0x02
0x7ffe8bc5cb27 : 0x00
0x7ffe8bc5cb28 : 0x1b
0x7ffe8bc5cb29 : 0x06
0x7ffe8bc5cb2a : 0xd7
0x7ffe8bc5cb2b : 0x11
0x7ffe8bc5cb2c : 0x00
0x7ffe8bc5cb2d : 0x00
0x7ffe8bc5cb2e : 0x00
0x7ffe8bc5cb2f : 0x00
0x7ffe8bc5cb30 : 0xf6
0x7ffe8bc5cb31 : 0x28
0x7ffe8bc5cb32 : 0x5c
0x7ffe8bc5cb33 : 0x8f
0x7ffe8bc5cb34 : 0xc2
0x7ffe8bc5cb35 : 0xf5
0x7ffe8bc5cb36 : 0xfc
0x7ffe8bc5cb37 : 0x3f
0x7ffe8bc5cb38 : 0x00
0x7ffe8bc5cb39 : 0x00
0x7ffe8bc5cb3a : 0xa0
0x7ffe8bc5cb3b : 0x42
0x7ffe8bc5cb3c : 0x4a
0x7ffe8bc5cb3d : 0x6f
0x7ffe8bc5cb3e : 0x6e
0x7ffe8bc5cb3f : 0x20
0x7ffe8bc5cb40 : 0x44
0x7ffe8bc5cb41 : 0x6f
0x7ffe8bc5cb42 : 0x65
0x7ffe8bc5cb43 : 0x00
0x7ffe8bc5cb44 : 0x00
0x7ffe8bc5cb45 : 0x00
0x7ffe8bc5cb46 : 0x00
0x7ffe8bc5cb47 : 0x00
```
  _NOTE_ : les adresses affichées sont susceptible de changer d'une exécution à une autre, mais nous aurons toujours un bloc contigu en mémoire (C.-à-d. adresses successives en mémoire) pour l'objet `client`.

# Exercice 1 

  En vous référant au code et au résultat ci-dessus :
  - Quelle est l'_adresse de départ_ qui correspond au champ `.id` de l'objet `client` ?
  - Sur combien d'octets est stocké le champ `.id` ?
  - Est-ce le mode little-endian ou big-endian qui est utilisé pour le stockage du champ `.id` ?
  - Donnez la représentation hexadécimale du champ `.id` dans la mémoire

# Exercice 2 

  En vous référant au code et au résultat ci-dessus :
  - Quelle est l'_adresse de départ_ qui correspond au champ `.name` de l'objet `client` ?
  - Sur combien d'octets est stocké le champ `.name` ?
  - Est-ce le mode little-endian ou big-endian qui est utilisé pour le stockage du champ `.name` ?

# Exercice 3

  En vous référant au code et au résultat ci-dessus :
  - Quelle est l'_adresse de départ_ qui correspond au champ `.taille` de l'objet `client` ?
  - Sur combien d'octets est stocké le champ `.taille` ?
  - Est-ce le mode little-endian ou big-endian qui est utilisé pour le stockage du champ `.taille` ?
  - Donnez la représentation hexadécimale du champ `.taille` dans la mémoire

# Exercice 4

  En vous référant au code et au résultat ci-dessus :
  - Donnez la représentation hexadécimale du champ `.poste` de l'objet `client` après conversion, si applicable, de son boutisme (endianness)
  - Donnez la représentation hexadécimale du champ `.id` de l'objet `client` après conversion, si applicable, de son boutisme (endianness)
  - Donnez la représentation hexadécimale du champ `.age` de l'objet `client` après conversion, si applicable, de son boutisme (endianness)

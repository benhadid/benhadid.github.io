<!DOCTYPE html>
<html>

  <head>
  

  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title> Traveaux Pratiques #10 - Pipelining & aléas d’exécutions - Architecture des ordinateurs / Automne 2020 </title>
  <meta name="description" content="# Objectifs- Apprendre le fonctionnement d'un processeur en pipeline (i.e. pipeline en deux étapes)- Apprendre à gérer les aléas d'exécutions dans un process...">
  
  <link rel="stylesheet" href="/l2ado/_css/main.css">
  <link rel="canonical" href="http://benhadid.github.io//l2ado/labs/11_lab.md">
  <link rel="alternate" type="application/rss+xml" title="Architecture des ordinateurs / Automne 2020 - " href="http://benhadid.github.io//l2ado/feed.xml" />
<link rel='stylesheet' id='open-sans-css'  href='//fonts.googleapis.com/css?family=Open+Sans%3A300italic%2C400italic%2C600italic%2C300%2C400%2C600&#038;subset=latin%2Clatin-ext&#038;ver=4.2.4' type='text/css' media='all' />
<link href='https://fonts.googleapis.com/css?family=Titillium+Web:600italic,600,400,400italic' rel='stylesheet' type='text/css'>




<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css" integrity="sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ" crossorigin="anonymous">

<!-- MathJax -->
<script type="text/javascript" async
  src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML">
</script>
</head>


  <body>

    <header class="site-header">

  <div class="wrapper" style="z-index: 100;">
      <table><tr>
          <td><img width="75" src="/l2ado/_images/logo.png" valign="middle"></td>
          <td style="padding-left:10px;"><a class="schoolname" style="font-size: 15px;" class="site-title" href=""></a>
          <br/>
          <span style="margin-top: -2px;margin-bottom: -10px;" class="site-title"><a href="/l2ado/" title="Architecture des ordinateurs / Automne 2020 - "><b>Architecture des ordinateurs</a></b></span>
          <br/>
          <span class="coursesemeter" style="font-size: 12px;font-weight: bold;margin-top: 10px;display: block;">Automne 2020</span>
          </td>
        </tr></table>

    <nav class="site-nav">

      <a href="#" class="menu-icon menu.open">
        <svg viewBox="0 0 18 15">
          <path fill="#424242" d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.031C17.335,0,18,0.665,18,1.484L18,1.484z"/>
          <path fill="#424242" d="M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0c0-0.82,0.665-1.484,1.484-1.484 h15.031C17.335,6.031,18,6.696,18,7.516L18,7.516z"/>
          <path fill="#424242" d="M18,13.516C18,14.335,17.335,15,16.516,15H1.484C0.665,15,0,14.335,0,13.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.031C17.335,12.031,18,12.696,18,13.516L18,13.516z"/>
        </svg>
      </a>  

    <div class="trigger"><h1>Main Navigation</h1>

 <ul class="menu">
    
    <li>
        <a class="page-link" href="/l2ado/">
            <i class="fa fa-home fa-lg"></i> Accueil
        </a>
    </li>
    
    <li>
        <a class="page-link" href="/l2ado/schedule/">
            <i class="fas fa-calendar-alt"></i> Programme
        </a>
    </li>
    
    <li>
        <a class="page-link" href="/l2ado/lectures/">
            <i class="fas fa-book-reader"></i> Cours
        </a>
    </li>
    
    <li>
        <a class="page-link" href="/l2ado/labs/">
            <i class="fas fa-laptop-code"></i> Pratiques
        </a>
    </li>
    
    <li>
        <a class="page-link" href="/l2ado/assignments/">
            <i class="fas fa-user-graduate"></i> Devoirs
        </a>
    </li>
    
    <li>
        <a class="page-link" href="/l2ado/project/">
            <i class="fas fa-user-graduate"></i> Projet
        </a>
    </li>
    
    <li>
        <a class="page-link" href="/l2ado/materials/">
            <i class="fas fa-book"></i> Support
        </a>
    </li>
    
</ul>

     </div>  
    </nav>

  </div>

  <div class="header-texture" style="height:100%; z-index: 0; position: absolute; top:0; right: 0; left: 0; 
  background-image: url('/l2ado/_images/pattern.png');" />

</header>


    <div class="page-content">
      <div class="wrapper">
        <div class="post">

  <header class="post-header">
    <h1 class="post-title">Traveaux Pratiques #10 - Pipelining & aléas d’exécutions</h1>
    <p class="post-meta">Publié le Thursday 19/09/2019</p>
  </header>

  <div>
    
    <span style="font-weight: bold">Date prévue : 
      <!-- 26/09/2019 -->

      
      Jeudi
      26
      
      Septembre
      2019
  

    </span>
    

    

  </div>

  <br />
  <article class="post-content">
    # Objectifs

- Apprendre le fonctionnement d'un processeur en pipeline (i.e. pipeline en deux étapes)
- Apprendre à gérer les aléas d'exécutions dans un processeur en pipeline

# Énoncé


Cliquez [ici](./twostage_starter.zip) pour récupérer le fichier de démarrage pour ce TP, puis décompressez le dans le répertoire de votre choix. Voici la liste des fichiers que vous devez avoir :

```shell
 twostage_starter
   ├── alu.circ
   ├── cpu.circ
   ├── mem.circ
   ├── regfile.circ
   ├── run_harness.circ
   ├── tests
   │   ├── config.json
   │   ├── logisim-evolution.jar
   │   ├── roms
   │   │   ├── assembler.py
   │   │   ├── lui.hex
   │   │   ├── lui.s
   │   │   ├── mult.hex
   │   │   ├── mult.s
   │   │   ├── simple.hex
   │   │   └── simple.s
   │   ├── test_lui.circ
   │   ├── test_lui.out
   │   ├── test_mult.circ
   │   ├── test_mult.out
   │   ├── test.py
   │   ├── test_simple.circ
   │   └── test_simple.out
   └── test.sh
 ```

**REMARQUE** :

Dans ce TP, vous utiliserez [Logisim](/assets/bin/logisim-evolution.jar) pour implémenter un processeur 16 bits à pipeline en deux étages. Pour réaliser cette tache, vous devez d'abord remplacer les fichiers socles **alu.circ**, **regfile.circ** et **cpu.circ** fournis dans ce pack par vos fichiers correspondants produits lors de la réalisation du TP &laquo; [TP - Processeur à cycle unique](./lab_09.html) &raquo;.

Le fichier **cpu.circ** fournit dans le kit de démarrage comporte une unité de mémoire entièrement fonctionnelle ainsi que des espaces réservés pour vos précédentes implémentations de &laquo; l'[Unité Arithmétique et Logique (UAL)](./lab_07.html) &raquo; et du &laquo; [Banc de registres](./lab_08.html) &raquo;. **Vous devez remplacer ce fichier par celui produit lors du TP [Processeur à cycle unique](./lab_09.html) avant de continuer avec ce TP.**

Dans ce TP, vous devez modifier cette implémentation en cycle unique (c.-à-d. modifier le fichier **cpu.circ**) pour implémenter un processeur 16 bits en mode pipeline à deux étages :

1. Récupération de l'instruction ( Instruction Fetch &mdash; IF ) : Une instruction est extraite de la mémoire d'instructions.
2. Exécution ( EXecute &mdash; EX ) : l'instruction est décodée, exécutée et validée (i.e. réécrite dans le banc de registres ou en mémoire si nécessaire). Il s'agit tout simplement de la combinaison des étapes restantes d'un pipeline MIPS classique (DE &mdash; EX &mdash; MEM &mdash; WB) en une seule opération.

Vous devez réaliser que les aléas liés à la manipulation des données ne posent **PAS** de problème pour cette conception, car tous les accès à toutes les sources de données se produisent dans une seule étape du pipeline (le deuxième étage).

Cependant, il y a bien des aléas d’exécutions à gérer. En particulier, l'instruction immédiatement après un branchement ou un saut n'est pas nécessairement exécutée si la branche est prise. Cela rend votre tâche un peu plus complexe car au moment où vous réalisez qu'une branche ou un saut est en phase d'exécution, vous avez déjà accédé à la mémoire d'instructions et récupéré (éventuellement) la mauvaise instruction.

Vous devrez donc &laquo; annuler &raquo; l'instruction récupérée si l'instruction en cours d'exécution est un saut ou un branchement validé. Vous ne devez annuler l'instruction récupérée que si une branche est **prise** (n'annuler pas autrement). L'annulation d'instructions DOIT être accomplie en insérant un `nop` dans l'étape d'exécution du pipeline au lieu de l'instruction récupérée. Notez que **0x0000** est le code machine associé à l'instruction `nop` pour notre processeur.

Votre circuit fini doit implémenter l'Architecture du Jeu d'Instructions Réduit (AJIR) indiqué dans le précédent [TP](./lab_09.html).

# Clarifications et différences notables par rapport à MIPS

Étant donné que les étapes de décodage, d'exécution, et de validation (réécriture dans le banc de registres ou accès à la mémoire de données) sont gérés dans le deuxième étage du pipeline, votre processeur doit être plus ou moins similaire à une implémentation à un cycle unique, sauf pour la latence de démarrage d'un cycle d'horloge et les retards dus aux instructions de branchement/saut.

On remarquera également un problème d'amorçage ici : pendant le premier cycle, les registres introduits entre les différentes étapes du pipeline sont initialement (vides), mais le vide n'existe pas en hardware. Comment gérons-nous cela ? A quoi correspondrait le vide dans notre processeur ? C-à-d. à quelles valeurs devons-nous initialer les registres nouvellement introduits pour implémenter le pipeline ?

# Tester votre processeur

Après avoir complété l'implémentation du pipeline dans **cpu.circ**, le fichier socle **run_harness.circ** permet d'exécuter sur ce processeur un programme stocké dans la mémoire ROM fournie. Le processeur, implémenté dans **cpu.circ**, émettra l'adresse d'une instruction et acceptera l'instruction récupérée à cette adresse en tant qu'entrée. Inspectez les fichiers **cpu.circ** et **run_harness.circ** pour voir exactement ce qui se passe.

Des exemples de tests pour votre processeur sont inclus dans le kit de démarrage - il suffit d'exécuter le script `./test.sh` depuis une console pour vérifier votre implémentation (Veuillez noter que ce script ne fonctionnent qu'avec Python 3).

Les tests fournis ne sont **PAS** exhaustifs et vous devez effectuer d'autres tests par vous-même.

Si votre circuit échoue à un test et que vous voulez savoir ce qui ne va pas, allez dans votre dossier de tests et ouvrez le fichier socle correspondant au test (ex: **test_lui.circ**). Faites un clic droit sur votre implémentation du processeur et choisissez "view main". Vous pouvez ensuite voir votre processeur avec les entrées fournies par le test. Assurez-vous que votre implémentation du décodeur se comporte comme prévu !

Il n'est pas évident de fournir de petits tests unitaires ici comme dans la partie programmation C/MIPS de ce cours, car il s'agit ici d'implémenter le chemin de données complet d'un processeur. En tant que tel, la meilleure approche serait d'écrire de courts programmes (c.f. voir le TP précédent) pour exercer votre chemin de données de différentes manières. Pour vous aidez dans cette tache, nous vous avons fourni un assembleur rudimentaire pour écrire vos tests. Exécutez l'assembleur (nécessite l'installation de python 2.7 sur votre ordinateur personnel) et donnez en paramètre votre fichier source (par exemple `test.s`) comme suit :

```bash
nano test.s               # nano est un éditeur de texte (d'autres éditeurs de texte peuvent être utilisés)
                          # pour créer votre fichier source tests.s, utilisez uniquement des instructions AJIR

./assembler.py test.s     # Cette commande générera un fichier de code machine en sortie appelé test.hex
./assembler.py test.s -v  # Comme ci-dessus, mais fournit également des commentaires détaillés
```

Une fois le code machine généré, vous devez le charger dans l'unité de mémoire d'instructions dans **run_harness.circ** avant de commencer l'exécution. Pour cela, ouvrez **run_harness.circ** et localisez l'unité mémoire d'instructions `Instruction Memory`

![right_click_rom.png](/assets/images/right_click_rom.png){: .center-l2ado-image height="70%" width="70%"}

Cliquez sur le module de mémoire avec le bouton droit de la souris puis, depuis le menu déroulant sélectionnez "Load image..." pour charger le fichier généré précédemment par l'assembleur.

![load_rom_image.png](/assets/images/load_rom_image.png){: .center-l2ado-image height="70%" width="70%"}

Une fois le code machine chargé en mémoire, vous pouvez cocher l’horloge manuellement et regarder votre CPU exécuter votre programme ! Vous pouvez double-cliquer sur le CPU à l'aide de l'outil poke pour examiner le comportement de votre chemin de données sous l'entrée fournie.

# Soumettre vos circuits

Pour l'évaluation de ce TP, vous devez soumettre vos circuits dans un fichier **zippé** : les circuits **alu.circ**, **regfile.circ** produits lors de la réalisation des TPs &laquo;[Unité Arithmétique et Logique](./lab_07.html)&raquo;, &laquo;[Banc de registres](./lab_08.html)&raquo;, ainsi que votre circuit **cpu.circ** modifié et tout éventuel sous-circuit auquel il ferait appel.

```bash
fichier.zip
 ├── alu.circ
 ├── regfile.circ
 ├── cpu.circ
 └── ...
 ```

Par exemple, pour compresser les fichiers **file1.circ** et **file2.circ** dans un fichier **fichier.zip**, ouvrez une console (Ctrl-Alt-T sous Ubuntu), puis allez dans le répertoire contenant les fichiers **file1.circ** et **file2.circ**. Tapez ensuite la commande :

```bash
zip fichier.zip  file1.circ file2.circ
```

Soumettez ensuite le fichier résultat **fichier.zip** à l'évaluateur automatique.


<div class="bs-callout bs-callout-danger">
  <h4>ATTENTION</h4>

  <p>Vos fichiers <b>alu.circ</b> et <b>regfile.circ</b> doivent correspondre aux socles prévus dans <b>cpu.circ</b>. Cela signifie que vous devez veiller à ne pas réorganiser les entrées ou les sorties de ces circuits. Si vous avez besoin de plus d'espace, vous pouvez les déplacer en faisant attention à conserver leurs positionnements relatifs les uns par rapport aux autres.</p>

  <p>Pour vérifier que vos modifications n’ont pas rompu les correspondances entrés/sorties entre ces circuits et le circuit du processeur, ouvrez simplement le fichier <b>cpu.circ</b> et assurez-vous qu’il n’y a pas d’erreurs (pas de fils rouges ou oranges) et que les circuits fonctionnent correctement.</p>

  <p>L'évaluateur automatique utilise des fichiers similaires pour tester et évaluer votre implémentation. Vous devez donc vous basez sur les circuits fournis dans le kit de démarrage pour vous assurer que votre implémentation du processeur est correctement chargée dans <b>cpu.circ</b> et <b>run-harness.circ</b> avant de soumettre votre TP.</p>
</div>

<div class="bs-callout bs-callout-warning">
  <h4>REMARQUE</h4>

  <p>Vous utiliserez votre propre implémentation de &laquo; l'<a href="./lab_07.html">Unité Arithmétique et Logique (UAL)</a> &raquo; et du &laquo; <a href="./lab_08.html">Banc de registres</a> &raquo; lors de la conception de votre processeur en pipeline.</p>

  <p>Cependant, nous allons tester votre processeur en utilisant à la fois votre version de ces circuits ainsi qu'une version développée par vos enseignants. Vous obtiendrez une note maximale si votre processeur fonctionne correctement avec votre version de ces composants. Si la version de vos enseignants fonctionne mieux, une pénalité de 50% sera appliquée puis le score maximal entre les deux tests vous sera attribué.</p>
</div>

  </article>

</div>
      </div>
    </div>

    <footer class="site-footer">

  <div class="wrapper">

    <!--     <h2 class="footer-heading"></h2> -->
    <div class="footer-col-wrapper">
      <div class="footer-col  footer-col-1">

        <p class="text">
          02 rue Didouche Mourad <br />
16000 Alger<br />

      </div>

      <div class="footer-col  footer-col-2">
        <ul class="social-media-list">


          

          

          

          

          




        </ul>
      </div>
    </div>

  </div>

</footer>

  </body>

</html>
